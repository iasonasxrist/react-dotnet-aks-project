name: Build and Deploy Full Stack App

on:
  push:
    branches:
      - master

  workflow_dispatch:

permissions:
  id-token: write
  contents: read
env:
  ACR_NAME: aksprojectacr0001 # without .azurecr.io
  IMAGE_PREFIX: aksprojectacr0001.azurecr.io/myapp

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Setup .NET 8
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0.x"

      # Setup Node.js 22
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "22"

      # Login to Azure
      - name: Azure Login
        uses: azure/login@v1
        env:
          AZURE_LOGIN_PRE_CLEANUP: true
          AZURE_LOGIN_POST_CLEANUP: true
        with:
          auth-type: SERVICE_PRINCIPAL
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Login to ACR
      - name: Docker Login to ACR
        run: az acr login --name $ACR_NAME

      # Build frontend (React)
      - name: Build React frontend
        working-directory: Frontend/
        run: |
          npm install
          npm run build

      # Publish backend (.NET)
      # - name: Publish .NET backend
      #   working-directory: Movies/
      #   run: |
      #     dotnet restore Movies.sln
      #     dotnet publish -c Release -o publish

      # Build and push frontend Docker image
      - name: Build and push frontend image
        run:
     #    docker build -t $IMAGE_PREFIX-frontend:latest ./Frontend/MoviesWeb
            docker push $IMAGE_PREFIX-frontend:latest

      # Build and push backend Docker image
      # - name: Build and push backend image
      #   run: |
      #     docker build -t $IMAGE_PREFIX-backend:latest ./Movies
      #     docker push $IMAGE_PREFIX-backend:latest
